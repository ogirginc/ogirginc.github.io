<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-06-03T08:30:32+00:00</updated><id>/feed.xml</id><title type="html">ogirginc</title><entry><title type="html">How to solve the SSL error for Redis 6 on Heroku?</title><link href="/en/heroku-redis-ssl-error" rel="alternate" type="text/html" title="How to solve the SSL error for Redis 6 on Heroku?" /><published>2021-02-11T21:20:02+00:00</published><updated>2021-02-11T21:20:02+00:00</updated><id>/en/heroku-redis-ssl-error</id><content type="html" xml:base="/en/heroku-redis-ssl-error"><![CDATA[<details>
      <summary>
        <small><em>Last updated at today.</em></small>
      </summary>
      <small>1. <mark>Today</mark> – <em>Add "last updated" section to articles.</em></small>
  </details>
<p></p>

<p>If you try to connect a Ruby on Rails app with a Heroku Redis add-on (excluding the Hobby Dev plan), there is a very high chance for you to get the error below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=error: 
certificate verify failed (self signed certificate in certificate chain)
</code></pre></div></div>

<h2>Reason</h2>

<p>From version 6 and above, Redis requires using TLS to connect. However, Heroku does not use SSL internally. They terminate SSL at the router level and <a href="https://devcenter.heroku.com/articles/http-routing#routing">forward</a> requests from there to your application via HTTP which is safe as all these do happen behind Heroku’s firewall. Also, let’s face it, Heroku’s security measures <del>probably</del> are better than yours.</p>

<h2>Solution</h2>

<p>To fix this, you will need to use <code class="language-plaintext highlighter-rouge">OpenSSL::SSL::VERIFY_NONE</code> for your Redis client.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Redis</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
  <span class="ss">url: </span><span class="s1">'url'</span><span class="p">,</span>
  <span class="ss">driver: :ruby</span><span class="p">,</span>
  <span class="ss">ssl_params: </span><span class="p">{</span> <span class="ss">verify_mode: </span><span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span> <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<p>If you do use Sidekiq, configuration should be done through the Sidekiq initializers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sidekiq.rb</span>
<span class="no">Sidekiq</span><span class="p">.</span><span class="nf">configure_server</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">redis</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">ssl_params: </span><span class="p">{</span> <span class="ss">verify_mode: </span><span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">end</span>

<span class="no">Sidekiq</span><span class="p">.</span><span class="nf">configure_client</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">redis</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">ssl_params: </span><span class="p">{</span> <span class="ss">verify_mode: </span><span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h2>Troubleshooting</h2>

<h3>No error with Redis 6!?</h3>

<h4>Why?</h4>

<p>Assuming you have double-checked the Redis version, the plan is probably on the Hobby Dev version, which does support both HTTP and HTTPS <a href="https://devcenter.heroku.com/articles/heroku-redis#create-a-new-instance">connections</a>.</p>

<h4>Solution</h4>

<p>For the Hobby Dev plan, you should see two environment variables set under the app’s Config Vars section. If you do plan to keep the add-on as Hobby Dev, no change is needed.</p>

<p>If you do plan to upgrade the add-on to Premium 0 or above, you need to use <code class="language-plaintext highlighter-rouge">VERIFY_NONE</code> as above.</p>

<h2>Links</h2>
<ul>
  <li><a href="https://stackoverflow.com/questions/65834575/how-to-enable-tls-for-redis-6-on-sidekiq">https://stackoverflow.com/questions/65834575/how-to-enable-tls-for-redis-6-on-sidekiq</a></li>
</ul>]]></content><author><name></name></author><category term="redis" /><category term="heroku" /><category term="ssl" /><summary type="html"><![CDATA[Last updated at today. 1. Today – Add "last updated" section to articles.]]></summary></entry><entry><title type="html">How to install multiple Postgresql versions on macOS?</title><link href="/en/multi-version-postgresql-macos" rel="alternate" type="text/html" title="How to install multiple Postgresql versions on macOS?" /><published>2020-11-11T18:03:00+00:00</published><updated>2020-11-11T18:03:00+00:00</updated><id>/en/multi-version-postgresql-macos</id><content type="html" xml:base="/en/multi-version-postgresql-macos"><![CDATA[<details>
      <summary>
        <small><em>Last updated at today.</em></small>
      </summary>
      <small>1. <mark>Today</mark> – <em>Add "last updated" section to articles.</em></small>
  </details>
<p></p>

<p>So, you have decided to have multiple Postgresql versions on your Mac. Lucky for you, I have tried all options I was able to find and decided <a href="https://github.com/petere">Peter Eisentraut</a>’s <a href="https://github.com/petere/postgresql-common">Postgresql Common package</a>, which is a Postgresql database cluster manager for Postgresql.</p>

<h2>What is a database cluster?</h2>

<p>A database cluster is a bit of an ambiguous term. Its definition varies depending on the context. In this article, I am not going to explain what it means in production.
On local machines, it is a collection of databases that are managed by a single database server. Clusters allow us to install multiple versions of Postgresql on our macOS. To manage these clusters, we will be using a package called Postgresql Common.</p>

<h2>Postgresql Common with Homebrew</h2>

<p>First, we will install the Postgresql Common <a href="https://github.com/petere/homebrew-postgresql">formulae</a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>petere/postgresql/postgresql-common
</code></pre></div></div>

<p>With these formulae installed, we can have multiple versions of PostgreSQL in parallel. We should be able to install any version of Postgresql starting with version 8.3. If you do want to check the available versions, use the Homebrew’s <code class="language-plaintext highlighter-rouge">search</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew search petere/postgresql
</code></pre></div></div>

<p>Or you check the Github repo too see the availble version on your browser: <a href="https://github.com/petere/homebrew-postgresql">https://github.com/petere/homebrew-postgresql</a>. If I wanted to install the version 12, this is how I would do it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install petere/postgresql/postgresql@12
</code></pre></div></div>

<p>This command will fetch the latest minor version of the provided major version. For example, if there are 4 minor versions available, we would have version 12.4 installed automatically. Depending on your internet speed, it should not take more than a couple of minutes to download. Same goes for installing it with the <code class="language-plaintext highlighter-rouge">make</code> command, which depends on how fast the computer is.</p>

<h2>Creating a cluster for the first time</h2>

<p>To create a cluster, we will be using the <code class="language-plaintext highlighter-rouge">pg_createcluster</code> wrapper scripts. These scripts are just a wrappers around <code class="language-plaintext highlighter-rouge">pg_ctl</code> and <code class="language-plaintext highlighter-rouge">initdb</code> to make managing easier.
Now, lets create our first cluster. We will name this one as the <code class="language-plaintext highlighter-rouge">main</code> but you can choose whatever name you like.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pg_createcluster 12 main
</code></pre></div></div>

<p>We have created a new cluster named <code class="language-plaintext highlighter-rouge">main</code> which is version 12.4. If you like,  we can check the status of the cluster with the <code class="language-plaintext highlighter-rouge">pg_lsclusters</code> wrapper script.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pg_lsclusters
</code></pre></div></div>

<p>This should list all the clusters, with some additional information, we have created in our machine.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ver Cluster Port Status Owner    Data directory                        Log file
12  main    5432 down   ogirginc /usr/local/var/lib/postgresql/12/main /usr/local/var/log/postgresql/postgresql-12-main.log
</code></pre></div></div>

<p>Lets start our newly created cluster, we will be using <code class="language-plaintext highlighter-rouge">pg_ctlcluster</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pg_ctlcluster 12 main start
</code></pre></div></div>

<p>Just to be sure, check the <code class="language-plaintext highlighter-rouge">Status</code> with <code class="language-plaintext highlighter-rouge">pg_lsclusters</code>. You should see the the word <code class="language-plaintext highlighter-rouge">down</code> being replaced with <code class="language-plaintext highlighter-rouge">online</code>. Also, the output color change might change depending on your theme. In my case, it was red turned to green.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ver Cluster Port Status Owner    Data directory                        Log file
12  main    5432 online ogirginc /usr/local/var/lib/postgresql/12/main /usr/local/var/log/postgresql/postgresql-12-main.log
</code></pre></div></div>

<p>After starting your cluster, rest is the same with the any Postgresql installation. Create a database with <code class="language-plaintext highlighter-rouge">created</code> command and list those with <code class="language-plaintext highlighter-rouge">psql -c '\l'</code> command to check if all is good. You should something similar to this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                          List of databases
   Name    |  Owner   | Encoding |   Collate   | Ctype |   Access privileges
<span class="nt">-----------</span>+----------+----------+-------------+-------+-----------------------
 ogirginc  | ogirginc | UTF8     | en_US.UTF-8 | UTF-8 |
 postgres  | ogirginc | UTF8     | en_US.UTF-8 | UTF-8 |
 template0 | ogirginc | UTF8     | en_US.UTF-8 | UTF-8 | <span class="o">=</span>c/ogirginc          +
           |          |          |             |       | <span class="nv">ogirginc</span><span class="o">=</span>CTc/ogirginc
 template1 | ogirginc | UTF8     | en_US.UTF-8 | UTF-8 | <span class="o">=</span>c/ogirginc          +
           |          |          |             |       | <span class="nv">ogirginc</span><span class="o">=</span>CTc/ogirginc
<span class="o">(</span>4 rows<span class="o">)</span>
</code></pre></div></div>

<p>That’s it! Now just repeat the process for each version you want to install and it should work with a problem. If you do encounter any problems, check the Troubleshooting section below. If the problem still continues, feel free to open an issue and I would try my best to help!</p>

<h2>Troubleshooting</h2>

<h3>Authentication failed for user</h3>

<h4>Why?</h4>

<p>The default Postgres configuration sets the client authentication method to <code class="language-plaintext highlighter-rouge">peer</code> or <code class="language-plaintext highlighter-rouge">md5</code>, which can prevent connection to the database.</p>

<h4>Solution</h4>

<p>Run <code class="language-plaintext highlighter-rouge">psql -c 'show hba_file;'</code> to get <code class="language-plaintext highlighter-rouge">pg_hba.conf</code>’s path. The output should look like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                   hba_file
<span class="nt">-----------------------------------------------</span>
 /usr/local/etc/postgresql/12/main/pg_hba.conf
<span class="o">(</span>1 row<span class="o">)</span>
</code></pre></div></div>

<p>Open the <code class="language-plaintext highlighter-rouge">pg_hba.conf</code> file with your editor and go to the end of it, where we can see the prefered authentication methods. If you don’t have any sensitive data and your local database is not accessible through the internet, I would suggest changing the <code class="language-plaintext highlighter-rouge">METHOD</code> to <code class="language-plaintext highlighter-rouge">trust</code> for eas of use. This is how I use it:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Database administrative login by Unix domain socket</span>
<span class="nb">local   </span>all             ogirginc                                trust

<span class="c"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span>

<span class="c"># "local" is for Unix domain socket connections only</span>
<span class="nb">local   </span>all             all                                     trust
<span class="c"># IPv4 local connections:</span>
host    all             all             127.0.0.1/32            trust
<span class="c"># IPv6 local connections:</span>
host    all             all             ::1/128                 trust
<span class="c"># Allow replication connections from localhost, by a user with the</span>
<span class="c"># replication privilege.</span>
<span class="nb">local   </span>replication     all                                     peer
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5
</code></pre></div></div>

<h3>No such file or directory</h3>

<h4>Why?</h4>

<p>When creating a cluster, <code class="language-plaintext highlighter-rouge">pg_ctl</code> fails to find <code class="language-plaintext highlighter-rouge">conf.d</code> because it is missing. It’s a known bug. Check <a href="https://github.com/petere/homebrew-postgresql/issues/45">#45</a> and <a href="https://github.com/petere/homebrew-postgresql/issues/49">#49</a> for additional details.</p>

<p>Example output of <code class="language-plaintext highlighter-rouge">pg_ctlcluster 12 main start</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: /usr/local/opt/postgresql@12/bin/pg_ctl /usr/local/opt/postgresql@12/bin/pg_ctl start <span class="nt">-D</span> /usr/local/var/lib/postgresql/12/main <span class="nt">-l</span> /usr/local/var/log/postgresql/postgresql-12-main.log <span class="nt">-s</span> <span class="nt">-o</span>  <span class="nt">-c</span> <span class="nv">config_file</span><span class="o">=</span><span class="s2">"/usr/local/etc/postgresql/12/main/postgresql.conf"</span> <span class="nt">-c</span> <span class="nv">external_pid_file</span><span class="o">=</span><span class="s2">"/usr/local/var/run/postgresql/12-main.pid"</span>  exited with status 1:
2020-07-13 10:32:51.376 GMT <span class="o">[</span>9841] LOG:  could not open configuration directory <span class="s2">"/usr/local/etc/postgresql/12/main/conf.d"</span>: No such file or directory
2020-07-13 10:32:51.376 GMT <span class="o">[</span>9841] FATAL:  configuration file <span class="s2">"/usr/local/etc/postgresql/12/main/postgresql.conf"</span> contains errors
pg_ctl: could not start server
Examine the log output.
</code></pre></div></div>

<h4>Solution</h4>

<p>Create the <code class="language-plaintext highlighter-rouge">conf.d</code> with the <code class="language-plaintext highlighter-rouge">mkdir</code> command.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /usr/local/etc/postgresql/12/main/conf.d
</code></pre></div></div>

<h3>Perl required</h3>

<h4>Why?</h4>

<p>You get the error bellow because the required Perl files could not be found. Check <a href="https://github.com/petere/homebrew-postgresql/issues/44#issuecomment-570881749">#44</a> for additional details.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>configure: error: header file &lt;perl.h&gt; is required <span class="k">for </span>Perl
</code></pre></div></div>

<h4>Solution</h4>

<p>Try installing Xcode which should install all necessary Perl files and specify the Xcode that you wish to use for command line developer tools like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>xcode-select <span class="nt">--switch</span> /Applications/Xcode.app/
</code></pre></div></div>

<h3>LANG error</h3>

<h4>Why?</h4>

<p>For some unknown reasons, operation system’s locales are messed up.</p>

<h4>Solution</h4>

<p>First export the desired language and than create the cluster. An example for <code class="language-plaintext highlighter-rouge">en_US</code> would be like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
pg_createcluster 12 main
</code></pre></div></div>

<p>However, I would highly suggest fixing the locales as it might cause additional non-database related problems.</p>

<h3>Different versions for `psql` and `server`</h3>

<h4>Why?</h4>

<p>You have installed multiple Postgresql versions with Homebrew and <code class="language-plaintext highlighter-rouge">psql</code> automaticly picks the latest version.</p>

<h4>Solution</h4>

<p>When trying to use <code class="language-plaintext highlighter-rouge">psql</code> with a ealir version of an Postgresql, a warning will be presented.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="o">(</span>13.0 <span class="o">(</span>Homebrew petere/postgresql<span class="o">)</span>, server 12.4 <span class="o">(</span>Homebrew petere/postgresql<span class="o">))</span>
</code></pre></div></div>

<p>First of all, this is just a warning. Secondly, most, if not all things should work in <code class="language-plaintext highlighter-rouge">psql</code>.
However, tools like <code class="language-plaintext highlighter-rouge">pg_dump</code> might fail. To fix when you get this warning, export the desired Postgresql vertion to the path.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/opt/postgresql@12/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>When retrying, there should not be any warning about version mismatch.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ psql
psql <span class="o">(</span>12.4 <span class="o">(</span>Homebrew petere/postgresql<span class="o">))</span>
Type <span class="s2">"help"</span> <span class="k">for </span>help.

<span class="nv">ogirginc</span><span class="o">=</span><span class="c">#</span>
</code></pre></div></div>

<h3>Create a database with a different port</h3>

<h4>Why?</h4>

<p>When you create a new cluster, Postgresql assigns the next available port number to this new cluster, which results in not being able to connect to the default 5432 port.
An example of an error, while trying to run <code class="language-plaintext highlighter-rouge">psql</code> for the newly created second cluster:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql: error: could not connect to server: could not connect to server: No such file or directory
	Is the server running locally and accepting
	connections on Unix domain socket <span class="s2">"/tmp/.s.PGSQL.5432"</span>?
</code></pre></div></div>

<h4>Solution</h4>

<p>To fix this connection error, we have to specificly tell <code class="language-plaintext highlighter-rouge">psql</code> which port it should use to connect to the database by exporting the <code class="language-plaintext highlighter-rouge">PGPORT</code> environment variable.
Check with the <code class="language-plaintext highlighter-rouge">pg_lsclusters</code> wrapper script to which port do you need to connect the database.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ver Cluster Port Status Owner    Data directory                        Log file
12  main    5433 online ogirginc /usr/local/var/lib/postgresql/12/main /usr/local/var/log/postgresql/postgresql-12-main.log
13  main    5432 down   ogirginc /usr/local/var/lib/postgresql/13/main /usr/local/var/log/postgresql/postgresql-13-main.log
</code></pre></div></div>

<p>To use version 12, I need to set <code class="language-plaintext highlighter-rouge">PGPORT</code> to <code class="language-plaintext highlighter-rouge">5433</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PGPORT</span><span class="o">=</span>5433
</code></pre></div></div>
<p>With this explicit port setting, we can use <code class="language-plaintext highlighter-rouge">psql</code> or any other Postgresql utilities without any problems.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="o">(</span>12.4 <span class="o">(</span>Homebrew petere/postgresql<span class="o">))</span>
Type <span class="s2">"help"</span> <span class="k">for </span>help.

<span class="nv">ogirginc</span><span class="o">=</span><span class="c">#</span>
</code></pre></div></div>

<h3>You call this simple?</h3>

<h4>Why?</h4>

<p>I am fully aware it is not simple nor easy, but it gets the job done.</p>

<h4>Solution</h4>

<p>Be the change and create a simpler way! Pretty please? :)</p>]]></content><author><name></name></author><category term="postgresql" /><category term="macos" /><summary type="html"><![CDATA[Last updated at today. 1. Today – Add "last updated" section to articles.]]></summary></entry></feed>